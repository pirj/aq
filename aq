#!/usr/bin/env sh

# aq - QEMU wrapper script
# Usage: aq [new|start|stop|console|exec|rm|ls|ps] [args...]

# set -e
# set -o pipefail Bashism

BASE_DIR=~/.local/share/aq

aq_help() {
  cat <<HELP
    aq new [vm-name]
    aq start vm-name
    aq stop vm-name
    aq console vm-name
    aq exec vm-name shell-script
    aq rm vm-name
    aq ls
HELP
}

random_vm_name() {
  # Approximately 200K words, 2^32 random names
  shuf -n 2 /usr/share/dict/words | tr '\n' '-'| sed 's/-$//'
}

LATEST_ALPINE_MAJOR_MINOR=3.22
LATEST_ALPINE_ISO=alpine-virt-3.22.1-aarch64.iso

download_base_alpine_iso() {
  mkdir -p $BASE_DIR
  (
    cd $BASE_DIR
    [ -f $LATEST_ALPINE_ISO ] || wget https://dl-cdn.alpinelinux.org/alpine/v$LATEST_ALPINE_MAJOR_MINOR/releases/aarch64/$LATEST_ALPINE_ISO
  )
}

stderr() {
  echo "$@" >&2
}

aq_new() {
  [ -z "$VM_NAME" ] && VM_NAME=$(random_vm_name)
  download_base_alpine_iso
  (
    cd $BASE_DIR
    mkdir $VM_NAME
    cd $VM_NAME
    qemu-img create -f qcow2 storage.qcow2 6G 1>/dev/null
  )
  stderr Created:
  echo $VM_NAME
}

aq_start() {
  [ -z "$VM_NAME" ] && stderr 'Error: VM name required: `aq start <vm-name>`.' && exit 1

  qemu-system-aarch64 \
    -machine virt,highmem=on -accel hvf -cpu host -m 1G \
    -bios $(brew --prefix qemu)/share/qemu/edk2-aarch64-code.fd \
    -drive if=virtio,file=$BASE_DIR/$VM_NAME/storage.qcow2 \
    -cdrom $BASE_DIR/$LATEST_ALPINE_ISO \
    -nic user,model=virtio-net-pci,hostfwd=tcp::2222-:22,hostfwd=tcp::8428-:8428 \
    -rtc base=utc,clock=host \
    -serial unix:$BASE_DIR/$VM_NAME/console.sock,server=on,wait=off,nodelay=on,telnet=on \
    -mon chardev=mon0,mode=readline -chardev socket,id=mon0,path=$BASE_DIR/$VM_NAME/control.sock,server=on,wait=off \
    -nographic \
    -monitor none &disown

  stderr Started $VM_NAME
}

aq_stop() {
  [ -z "$VM_NAME" ] && stderr 'Error: VM name required: `aq stop <vm-name>`.' && exit 1
  # echo quit | nc -U control.sock
  stderr "Not implemented yet"
}

available_telnet_port() {
  for prefix in $(seq 492 655); do
    if lsof -i :"$prefix"23 1>/dev/null; then
      true
    else
      echo $prefix
      return 0
    fi
  done

  stderr No available '***23' local TCP ports found.
  exit 1
}

# TODO: dynamically, via monitor, add telnet option?
#       remove after use?
aq_console() {
  [ -z "$VM_NAME" ] && stderr 'Error: VM name required: `aq console <vm-name>`.' && exit 1
  CONSOLE_PORT="$(available_telnet_port)"

  # `telnet` works over TCP. To provide Telnet console to the virtual machine's
  # shell, find an available TCP port, and relay that to the socket.
  # NOTE: no fork - exit when the Telnet client closes the connection
  socat TCP-LISTEN:$CONSOLE_PORT UNIX-CONNECT:$BASE_DIR/$VM_NAME/console.sock &
  telnet localhost "$CONSOLE_PORT"
}

aq_exec() {
  [ -z "$VM_NAME" ] && stderr 'Error: VM name required: `aq exec <vm-name> <shell-script>`.' && exit 1
  stderr "Not implemented yet"
}

aq_rm() {
  [ -z "$VM_NAME" ] && stderr 'Error: VM name required: `aq rm <vm-name>`.' && exit 1
  stderr "Not implemented yet"
}

aq_ls() {
  stderr "Not implemented yet"
}

COMMAND=$1
shift
VM_NAME=$1
case $COMMAND in
  new) aq_new "$*" ;;
  start) aq_start "$*" ;;
  stop) aq_stop "$*" ;;
  console) aq_console "$*" ;;
  exec) aq_exec "$*" ;;
  rm) aq_rm "$*" ;;
  ls) aq_ls ;;
  "" | "help" | "-h" | "--help") aq_help ;;
  *) stderr "Error: Unknown command $COMMAND."; exit 1 ;;
esac

exit 0
